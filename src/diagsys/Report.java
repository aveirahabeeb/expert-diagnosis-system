/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package diagsys;


import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author AJIBOLA
 */
public class Report extends javax.swing.JDialog {

    /**
     * Creates new form Report
     */
    
    ResultSet rs=null ;
     Connection conn = null;
      PreparedStatement pst = null;
      static JasperViewer jn = null;
       JasperDesign jd = null;
        JRDesignQuery nq = null;
        JasperPrint jp=null;
                JasperReport jr =null;
      
    public Report(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        StdTable();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        reporttable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Patient Details");
        setResizable(false);

        reporttable.setFont(new java.awt.Font("Palatino Linotype", 1, 12)); // NOI18N
        reporttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reporttable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reporttableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(reporttable);

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 3, 12)); // NOI18N
        jLabel1.setText("Click Row to Generate Diagnosis Report");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reporttableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reporttableMouseClicked
        try {

            int row = reporttable.getSelectedRow();
                String ct = ( reporttable.getModel().getValueAt(row, 0).toString());

                 this.dispose();
                 conn = SqlConnect.conDB();
                  InputStream is = Report.class.getClassLoader().getResourceAsStream("Config.properties");
            Properties props = new Properties();
            props.load(is);
            
         HashMap param = new HashMap();
         param.put("logo", new ImageIcon("diagsys/reportlogo.jpg"));
         
            jd = JRXmlLoader.load(props.getProperty("Report"));
            
            String s= "select Name,Gender,Age,Diagnosis_Date,Diagnosis_Result,Drug_Prescription,Doctor_Nurse,Symptoms from Patientinfo where id ='"+ct+"'";
            nq = new  JRDesignQuery();
            nq.setText(s);
            jd.setQuery(nq);
             jr = JasperCompileManager.compileReport(jd);
             jp =  JasperFillManager.fillReport(jr,param, conn); 
              
           jn = new JasperViewer(jp,false);
           jn.setTitle("Diagnosis Report");
           jn.setZoomRatio(new Float(0.64));
           jn.setSize(540, 593);
            jn.setLocationRelativeTo(null);
         
                        Progress();

        }  catch ( JRException | IOException | ClassNotFoundException | InstantiationException | InterruptedException| IllegalAccessException ex) {
           JOptionPane.showMessageDialog(this,ex);
        }
        
    }//GEN-LAST:event_reporttableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Report dialog = new Report(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable reporttable;
    // End of variables declaration//GEN-END:variables
   
    public final void StdTable() {
        try {
            //Class.forName("com.mysql.jdbc.Driver");

            conn = SqlConnect.conDB();
            String p ="select ID,Name from PatientInfo ";
                     pst = conn.prepareStatement(p);
                    rs = pst.executeQuery();          
                      reporttable.setModel(DbUtils.resultSetToTableModel(rs));
             rs.close();
                pst.close();
        } catch (SQLException | ClassNotFoundException | IOException | InstantiationException| IllegalAccessException ex) {
            Logger.getLogger(Diagnosis.class.getName()).log(Level.SEVERE, null, ex);
        }
                    
               
    }       
       
    public  void  Progress() throws InterruptedException{ 
          
          final JDialog g = new JDialog(this, false);
          g.setUndecorated(true);
          g.setSize(160, 110);
          ImageIcon icon = new ImageIcon("src/al.gif");
          g.add(new JLabel("", icon, JLabel.CENTER));
          g.setLocationRelativeTo(null);
          
        SwingWorker<String, Void>
                  worker = new SwingWorker<String, Void>() {
              @Override
              protected String doInBackground() throws Exception {
                  Thread.sleep(1900);
                   jn.setVisible(true);
                  return null;
              }
                @Override
             protected void done(){     
                 g.dispose();
              }      
          };
          worker.execute();
        
            g.setVisible(true);
    
      }

}
